'use client';

import { useState } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { BrainCircuit, Loader2 } from 'lucide-react';
import { generateMCQQuiz, type GenerateMCQQuizOutput } from '@/ai/flows/generate-mcq-quiz';
import { useAuth } from '@/context/auth-context';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Button } from '@/components/ui/button';
import QuizScreen from './quiz-screen';
import ResultsScreen from './results-screen';

type AppState = 'topic' | 'loading' | 'quiz' | 'results';
type Difficulty = 'Easy' | 'Medium' | 'Hard';

const formSchema = z.object({
  topic: z.string().min(3, 'Topic must be at least 3 characters long.').max(50, 'Topic must be 50 characters or less.'),
  difficulty: z.enum(['Easy', 'Medium', 'Hard']),
});
type FormValues = z.infer<typeof formSchema>;

export default function QuizApp() {
  const [appState, setAppState] = useState<AppState>('topic');
  const [quizData, setQuizData] = useState<GenerateMCQQuizOutput | null>(null);
  const [quizParams, setQuizParams] = useState<FormValues | null>(null);
  const [finalScore, setFinalScore] = useState(0);

  const { toast } = useToast();
  const { user } = useAuth();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { topic: '', difficulty: 'Medium' },
  });

  const handleTopicSubmit: SubmitHandler<FormValues> = async (values) => {
    setAppState('loading');
    setQuizParams(values);
    try {
      const quiz = await generateMCQQuiz(values);
      if (!quiz || !quiz.questions || quiz.questions.length === 0) {
        throw new Error('No questions were generated for this topic.');
      }
      setQuizData(quiz);
      setAppState('quiz');
    } catch (error) {
      console.error(error);
      toast({
        title: 'Error Generating Quiz',
        description: 'Failed to generate the quiz. Please try a different topic.',
        variant: 'destructive',
      });
      setAppState('topic');
    }
  };

  const handleQuizFinish = async (score: number) => {
    setFinalScore(score);
    setAppState('results');
  };

  const restartQuiz = () => {
    setQuizData(null);
    setFinalScore(0);
    if (quizParams) {
      handleTopicSubmit(quizParams);
    }
  };

  const startNewQuiz = () => {
    setQuizData(null);
    setQuizParams(null);
    setFinalScore(0);
    form.reset();
    setAppState('topic');
  };

  const renderContent = () => {
    switch (appState) {
      case 'topic':
        return (
          <Card className="w-full max-w-lg shadow-lg animate-in fade-in duration-500">
            <CardHeader className="text-center">
              <div className="flex justify-center items-center gap-2">
                <BrainCircuit className="w-8 h-8 text-primary" />
                <CardTitle className="text-3xl font-bold">Quick Test AI</CardTitle>
              </div>
              <CardDescription>Enter a topic, choose a difficulty, and get a quiz generated by AI.</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(handleTopicSubmit)} className="space-y-6">
                  <FormField
                    control={form.control}
                    name="topic"
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <Input placeholder="e.g., 'The Roman Empire' or 'React.js Hooks'" {...field} className="text-center text-base" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="difficulty"
                    render={({ field }) => (
                      <FormItem className="space-y-3">
                        <FormLabel className="text-center block">Select Difficulty</FormLabel>
                        <FormControl>
                          <RadioGroup
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            className="flex justify-center gap-4"
                          >
                            <FormItem className="flex items-center space-x-2 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="Easy" id="r1" />
                              </FormControl>
                              <FormLabel htmlFor="r1" className="font-normal text-base">Easy</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-2 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="Medium" id="r2" />
                              </FormControl>
                              <FormLabel htmlFor="r2" className="font-normal text-base">Medium</FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-2 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="Hard" id="r3" />
                              </FormControl>
                              <FormLabel htmlFor="r3" className="font-normal text-base">Hard</FormLabel>
                            </FormItem>
                          </RadioGroup>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
                    {form.formState.isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : 'Generate Quiz'}
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
        );
      case 'loading':
        return (
          <div className="flex flex-col items-center justify-center gap-4 text-center animate-in fade-in duration-500">
            <Loader2 className="w-12 h-12 text-primary animate-spin" />
            <h2 className="text-2xl font-semibold">Generating your quiz...</h2>
            {quizParams && (
                <p className="text-muted-foreground max-w-sm">
                    Please wait while we create a {quizParams.difficulty.toLowerCase()} quiz on "{quizParams.topic}".
                </p>
            )}
          </div>
        );
      case 'quiz':
        return quizData ? <QuizScreen quizData={quizData} onQuizFinish={handleQuizFinish} /> : null;
      case 'results':
        return quizData && quizParams ? (
          <ResultsScreen
            score={finalScore}
            totalQuestions={quizData.questions.length}
            quizParams={quizParams}
            onRestart={restartQuiz}
            onNewQuiz={startNewQuiz}
          />
        ) : null;
      default:
        return null;
    }
  };

  return (
    <div className="flex flex-col items-center justify-center w-full py-8">
      {renderContent()}
    </div>
  );
}
